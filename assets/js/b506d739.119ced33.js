"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5618],{4137:function(e,a,t){t.d(a,{Zo:function(){return d},kt:function(){return u}});var n=t(7294);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function l(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,i=function(e,a){if(null==e)return{};var t,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(i[t]=e[t]);return i}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=n.createContext({}),p=function(e){var a=n.useContext(s),t=a;return e&&(t="function"==typeof e?e(a):l(l({},a),e)),t},d=function(e){var a=p(e.components);return n.createElement(s.Provider,{value:a},e.children)},c={inlineCode:"code",wrapper:function(e){var a=e.children;return n.createElement(n.Fragment,{},a)}},m=n.forwardRef((function(e,a){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,d=o(e,["components","mdxType","originalType","parentName"]),m=p(t),u=i,b=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return t?n.createElement(b,l(l({ref:a},d),{},{components:t})):n.createElement(b,l({ref:a},d))}));function u(e,a){var t=arguments,i=a&&a.mdxType;if("string"==typeof e||i){var r=t.length,l=new Array(r);l[0]=m;var o={};for(var s in a)hasOwnProperty.call(a,s)&&(o[s]=a[s]);o.originalType=e,o.mdxType="string"==typeof e?e:i,l[1]=o;for(var p=2;p<r;p++)l[p]=t[p];return n.createElement.apply(null,l)}return n.createElement.apply(null,t)}m.displayName="MDXCreateElement"},577:function(e,a,t){t.r(a),t.d(a,{frontMatter:function(){return o},contentTitle:function(){return s},metadata:function(){return p},toc:function(){return d},default:function(){return m}});var n=t(7462),i=t(3366),r=(t(7294),t(4137)),l=["components"],o={title:"Lineage sample code",sidebar_label:"Lineage sample code",slug:"/lineage/sample_code",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/lineage/sample_code.md"},s="Lineage sample code",p={unversionedId:"docs/lineage/sample_code",id:"docs/lineage/sample_code",isDocsHomePage:!1,title:"Lineage sample code",description:"The following samples will cover emitting dataset-to-dataset, dataset-to-job-to-dataset, chart-to-dataset, dashboard-to-chart and job-to-dataflow lineages.",source:"@site/genDocs/docs/lineage/sample_code.md",sourceDirName:"docs/lineage",slug:"/lineage/sample_code",permalink:"/datahub/docs/lineage/sample_code",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/lineage/sample_code.md",tags:[],version:"current",frontMatter:{title:"Lineage sample code",sidebar_label:"Lineage sample code",slug:"/lineage/sample_code",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/lineage/sample_code.md"},sidebar:"overviewSidebar",previous:{title:"Running Airflow locally with DataHub",permalink:"/datahub/docs/docker/airflow/local_airflow"},next:{title:"Spark lineage emitter",permalink:"/datahub/docs/spark-lineage"}},d=[],c={toc:d};function m(e){var a=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},c,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lineage-sample-code"},"Lineage sample code"),(0,r.kt)("p",null,"The following samples will cover emitting dataset-to-dataset, dataset-to-job-to-dataset, chart-to-dataset, dashboard-to-chart and job-to-dataflow lineages."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_mcpw_rest.py"},"lineage_emitter_mcpw_rest.py")," - emits simple bigquery table-to-table (dataset-to-dataset) lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_dataset_job_dataset.py"},"lineage_dataset_job_dataset.py")," - emits mysql-to-airflow-to-kafka (dataset-to-job-to-dataset) lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_dataset_chart.py"},"lineage_dataset_chart.py")," - emits the dataset-to-chart lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_chart_dashboard.py"},"lineage_chart_dashboard.py")," - emits the chart-to-dashboard lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_job_dataflow.py"},"lineage_job_dataflow.py")," - emits the job-to-dataflow lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_rest.py"},"lineage_emitter_rest.py")," - emits simple dataset-to-dataset lineage via REST as MetadataChangeEvent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_kafka.py"},"lineage_emitter_kafka.py")," - emits simple dataset-to-dataset lineage via Kafka as MetadataChangeEvent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/sql/snowflake.py#L249"},"Datahub Snowflake Lineage")," - emits Datahub's Snowflake lineage as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/a1bf95307b040074c8d65ebb86b5eb177fdcd591/metadata-ingestion/src/datahub/ingestion/source/sql/bigquery.py#L229"},"Datahub Bigquery Lineage")," - emits Datahub's Bigquery lineage as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/a9754ebe83b6b73bc2bfbf49d9ebf5dbd2ca5a8f/metadata-ingestion/src/datahub/ingestion/source/dbt.py#L625,L630"},"Datahub Dbt Lineage")," - emits Datahub's DBT lineage as MetadataChangeEvent.")),(0,r.kt)("p",null,"NOTE:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Emitting aspects as MetadataChangeProposalWrapper is recommended over emitting aspects via the\nMetadataChangeEvent."),(0,r.kt)("li",{parentName:"ul"},"Emitting any aspect associated with an entity completely overwrites the previous\nvalue of the aspect associated with the entity. This means that emitting a lineage aspect associated with a dataset will overwrite lineage edges that already exist.")))}m.isMDXComponent=!0}}]);