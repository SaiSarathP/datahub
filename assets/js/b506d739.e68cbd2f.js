"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[5618],{4137:function(e,t,a){a.d(t,{Zo:function(){return p},kt:function(){return u}});var n=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function r(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?r(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):r(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function l(e,t){if(null==e)return{};var a,n,i=function(e,t){if(null==e)return{};var a,n,i={},r=Object.keys(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)a=r[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=n.createContext({}),d=function(e){var t=n.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},p=function(e){var t=d(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=d(a),u=i,b=m["".concat(s,".").concat(u)]||m[u]||c[u]||r;return a?n.createElement(b,o(o({ref:t},p),{},{components:a})):n.createElement(b,o({ref:t},p))}));function u(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=a.length,o=new Array(r);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var d=2;d<r;d++)o[d]=a[d];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},577:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return l},contentTitle:function(){return s},metadata:function(){return d},toc:function(){return p},default:function(){return m}});var n=a(7462),i=a(3366),r=(a(7294),a(4137)),o=["components"],l={title:"Lineage sample code",sidebar_label:"Lineage sample code",slug:"/lineage/sample_code",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/lineage/sample_code.md"},s="Lineage sample code",d={unversionedId:"docs/lineage/sample_code",id:"docs/lineage/sample_code",isDocsHomePage:!1,title:"Lineage sample code",description:"The following samples will cover emitting dataset-to-dataset, dataset-to-job-to-dataset, chart-to-dataset, dashboard-to-chart and job-to-dataflow lineages.",source:"@site/genDocs/docs/lineage/sample_code.md",sourceDirName:"docs/lineage",slug:"/lineage/sample_code",permalink:"/docs/lineage/sample_code",editUrl:"https://github.com/linkedin/datahub/blob/master/docs/lineage/sample_code.md",tags:[],version:"current",frontMatter:{title:"Lineage sample code",sidebar_label:"Lineage sample code",slug:"/lineage/sample_code",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/docs/lineage/sample_code.md"},sidebar:"overviewSidebar",previous:{title:"Running Airflow locally with DataHub",permalink:"/docs/docker/airflow/local_airflow"},next:{title:"The Metadata Model",permalink:"/docs/metadata-modeling/metadata-model"}},p=[],c={toc:p};function m(e){var t=e.components,a=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,n.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"lineage-sample-code"},"Lineage sample code"),(0,r.kt)("p",null,"The following samples will cover emitting dataset-to-dataset, dataset-to-job-to-dataset, chart-to-dataset, dashboard-to-chart and job-to-dataflow lineages."),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_mcpw_rest.py"},"lineage_emitter_mcpw_rest.py")," - emits simple bigquery table-to-table (dataset-to-dataset) lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_dataset_job_dataset.py"},"lineage_dataset_job_dataset.py")," - emits mysql-to-airflow-to-kafka (dataset-to-job-to-dataset) lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_dataset_chart.py"},"lineage_dataset_chart.py")," - emits the dataset-to-chart lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_chart_dashboard.py"},"lineage_chart_dashboard.py")," - emits the chart-to-dashboard lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_job_dataflow.py"},"lineage_job_dataflow.py")," - emits the job-to-dataflow lineage via REST as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_rest.py"},"lineage_emitter_rest.py")," - emits simple dataset-to-dataset lineage via REST as MetadataChangeEvent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/examples/library/lineage_emitter_kafka.py"},"lineage_emitter_kafka.py")," - emits simple dataset-to-dataset lineage via Kafka as MetadataChangeEvent."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/src/datahub/ingestion/source/sql/snowflake.py#L249"},"Datahub Snowflake Lineage")," - emits Datahub's Snowflake lineage as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/a1bf95307b040074c8d65ebb86b5eb177fdcd591/metadata-ingestion/src/datahub/ingestion/source/sql/bigquery.py#L229"},"Datahub Bigquery Lineage")," - emits Datahub's Bigquery lineage as MetadataChangeProposalWrapper."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"https://github.com/linkedin/datahub/blob/a9754ebe83b6b73bc2bfbf49d9ebf5dbd2ca5a8f/metadata-ingestion/src/datahub/ingestion/source/dbt.py#L625,L630"},"Datahub Dbt Lineage")," - emits Datahub's DBT lineage as MetadataChangeEvent.")),(0,r.kt)("p",null,"NOTE:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Emitting aspects as MetadataChangeProposalWrapper is recommended over emitting aspects via the\nMetadataChangeEvent."),(0,r.kt)("li",{parentName:"ul"},"Emitting any aspect associated with an entity completely overwrites the previous\nvalue of the aspect associated with the entity. This means that emitting a lineage aspect associated with a dataset will overwrite lineage edges that already exist.")))}m.isMDXComponent=!0}}]);