"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[7952],{4137:function(e,t,a){a.d(t,{Zo:function(){return d},kt:function(){return u}});var n=a(7294);function r(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function i(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function o(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?i(Object(a),!0).forEach((function(t){r(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function s(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},i=Object.keys(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)a=i[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var l=n.createContext({}),c=function(e){var t=n.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):o(o({},t),e)),a},d=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var a=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),m=c(a),u=r,h=m["".concat(l,".").concat(u)]||m[u]||p[u]||i;return a?n.createElement(h,o(o({ref:t},d),{},{components:a})):n.createElement(h,o({ref:t},d))}));function u(e,t){var a=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=m;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,o[1]=s;for(var c=2;c<i;c++)o[c]=a[c];return n.createElement.apply(null,o)}return n.createElement.apply(null,a)}m.displayName="MDXCreateElement"},6063:function(e,t,a){a.r(t),a.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return c},toc:function(){return d},default:function(){return m}});var n=a(7462),r=a(3366),i=(a(7294),a(4137)),o=["components"],s={title:"Java Emitter",sidebar_label:"Java Emitter",slug:"/metadata-integration/java/as-a-library",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-integration/java/as-a-library.md"},l="Java Emitter",c={unversionedId:"metadata-integration/java/as-a-library",id:"metadata-integration/java/as-a-library",isDocsHomePage:!1,title:"Java Emitter",description:"In some cases, you might want to construct Metadata events directly and use programmatic ways to emit that metadata to DataHub. Use-cases are typically push-based and include emitting metadata events from CI/CD pipelines, custom orchestrators etc.",source:"@site/genDocs/metadata-integration/java/as-a-library.md",sourceDirName:"metadata-integration/java",slug:"/metadata-integration/java/as-a-library",permalink:"/datahub/docs/metadata-integration/java/as-a-library",editUrl:"https://github.com/linkedin/datahub/blob/master/metadata-integration/java/as-a-library.md",tags:[],version:"current",frontMatter:{title:"Java Emitter",sidebar_label:"Java Emitter",slug:"/metadata-integration/java/as-a-library",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-integration/java/as-a-library.md"},sidebar:"overviewSidebar",previous:{title:"Python Emitter",permalink:"/datahub/docs/metadata-ingestion/as-a-library"},next:{title:"Introduction to Scheduling Metadata Ingestion",permalink:"/datahub/docs/metadata-ingestion/schedule_docs/intro"}},d=[{value:"Installation",id:"installation",children:[{value:"Gradle",id:"gradle",children:[],level:3},{value:"Maven",id:"maven",children:[],level:3}],level:2},{value:"REST Emitter",id:"rest-emitter",children:[{value:"Usage",id:"usage",children:[],level:3},{value:"Emitter Code",id:"emitter-code",children:[],level:3}],level:2},{value:"Kafka Emitter",id:"kafka-emitter",children:[],level:2},{value:"Other Languages",id:"other-languages",children:[],level:2}],p={toc:d};function m(e){var t=e.components,a=(0,r.Z)(e,o);return(0,i.kt)("wrapper",(0,n.Z)({},p,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"java-emitter"},"Java Emitter"),(0,i.kt)("p",null,"In some cases, you might want to construct Metadata events directly and use programmatic ways to emit that metadata to DataHub. Use-cases are typically push-based and include emitting metadata events from CI/CD pipelines, custom orchestrators etc."),(0,i.kt)("p",null,"The ",(0,i.kt)("a",{parentName:"p",href:"https://mvnrepository.com/artifact/io.acryl/datahub-client"},(0,i.kt)("inlineCode",{parentName:"a"},"io.acryl:datahub-client"))," Java package offers REST emitter API-s, which can be easily used to emit metadata from your JVM-based systems. For example, the Spark lineage integration uses the Java emitter to emit metadata events from Spark jobs."),(0,i.kt)("h2",{id:"installation"},"Installation"),(0,i.kt)("p",null,"Follow the specific instructions for your build system to declare a dependency on the appropriate version of the package. "),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"Note")),": Check the ",(0,i.kt)("a",{parentName:"p",href:"https://mvnrepository.com/artifact/io.acryl/datahub-client"},"Maven repository")," for the latest version of the package before following the instructions below."),(0,i.kt)("h3",{id:"gradle"},"Gradle"),(0,i.kt)("p",null,"Add the following to your build.gradle."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-gradle"},"implementation 'io.acryl:datahub-client:0.0.1'\n")),(0,i.kt)("h3",{id:"maven"},"Maven"),(0,i.kt)("p",null,"Add the following to your ",(0,i.kt)("inlineCode",{parentName:"p"},"pom.xml"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-xml"},"\x3c!-- https://mvnrepository.com/artifact/io.acryl/datahub-client --\x3e\n<dependency>\n    <groupId>io.acryl</groupId>\n    <artifactId>datahub-client</artifactId>\n    \x3c!-- replace with the latest version number --\x3e\n    <version>0.0.1</version>\n</dependency>\n")),(0,i.kt)("h2",{id:"rest-emitter"},"REST Emitter"),(0,i.kt)("p",null,"The REST emitter is a thin wrapper on top of the ",(0,i.kt)("a",{parentName:"p",href:"https://hc.apache.org/httpcomponents-client-4.5.x/index.html"},(0,i.kt)("inlineCode",{parentName:"a"},"Apache HttpClient"))," library. It supports non-blocking emission of metadata and handles the details of JSON serialization of metadata aspects over the wire."),(0,i.kt)("p",null,"Constructing a REST Emitter follows a lambda-based fluent builder pattern. The config parameters mirror the Python emitter ",(0,i.kt)("a",{parentName:"p",href:"/datahub/docs/metadata-ingestion/sink_docs/datahub#config-details"},"configuration")," for the most part. In addition, you can also customize the HttpClient that is constructed under the hood by passing in customizations to the HttpClient builder."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import datahub.client.rest.RestEmitter;\n//...\nRestEmitter emitter = RestEmitter.create(b -> b\n                                              .server("http://localhost:8080")\n//Auth token for Managed DataHub              .token(AUTH_TOKEN_IF_NEEDED)\n//Override default timeout of 10 seconds      .timeoutSec(OVERRIDE_DEFAULT_TIMEOUT_IN_SECONDS)\n//Add additional headers                      .extraHeaders(Collections.singletonMap("Session-token", "MY_SESSION"))\n// Customize HttpClient\'s connection ttl      .customizeHttpAsyncClient(c -> c.setConnectionTimeToLive(30, TimeUnit.SECONDS))\n                                    );\n')),(0,i.kt)("h3",{id:"usage"},"Usage"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'import com.linkedin.dataset.DatasetProperties;\nimport com.linkedin.events.metadata.ChangeType;\nimport datahub.event.MetadataChangeProposalWrapper;\nimport datahub.client.rest.RestEmitter;\nimport datahub.client.Callback;\n// ... followed by\n\n// Creates the emitter with the default coordinates and settings\nRestEmitter emitter = RestEmitter.createWithDefaults(); \n\nMetadataChangeProposalWrapper mcpw = MetadataChangeProposalWrapper.builder()\n        .entityType("dataset")\n        .entityUrn("urn:li:dataset:(urn:li:dataPlatform:bigquery,my-project.my-dataset.user-table,PROD)")\n        .upsert()\n        .aspect(new DatasetProperties().setDescription("This is the canonical User profile dataset"))\n        .build();\n\n// Blocking call using future\nFuture<MetadataWriteResponse> requestFuture = emitter.emit(mcpw, null).get();\n\n// Non-blocking using callback\nemitter.emit(mcpw, new Callback() {\n      @Override\n      public void onCompletion(MetadataWriteResponse response) {\n        if (response.isSuccess()) {\n          System.out.println(String.format("Successfully emitted metadata event for %s", mcpw.getEntityUrn()));\n        } else {\n          // Get the underlying http response\n          HttpResponse httpResponse = (HttpResponse) response.getUnderlyingResponse();\n          System.out.println(String.format("Failed to emit metadata event for %s, aspect: %s with status code: %d",\n              mcpw.getEntityUrn(), mcpw.getAspectName(), httpResponse.getStatusLine().getStatusCode()));\n          // Print the server side exception if it was captured\n          if (response.getServerException() != null) {\n            System.out.println(String.format("Server side exception was %s", response.getServerException()));\n          }\n        }\n      }\n\n      @Override\n      public void onFailure(Throwable exception) {\n        System.out.println(\n            String.format("Failed to emit metadata event for %s, aspect: %s due to %s", mcpw.getEntityUrn(),\n                mcpw.getAspectName(), exception.getMessage()));\n      }\n    });\n')),(0,i.kt)("h3",{id:"emitter-code"},"Emitter Code"),(0,i.kt)("p",null,"If you're interested in looking at the REST emitter code, it is available ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/linkedin/datahub/blob/master/metadata-integration/java/datahub-client/src/main/java/datahub/client/rest/RestEmitter.java"},"here"),"."),(0,i.kt)("h2",{id:"kafka-emitter"},"Kafka Emitter"),(0,i.kt)("p",null,"The Java package doesn't currently support a Kafka emitter, but this will be available shortly."),(0,i.kt)("h2",{id:"other-languages"},"Other Languages"),(0,i.kt)("p",null,"Emitter API-s are also supported for:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"/datahub/docs/metadata-ingestion/as-a-library"},"Python"))))}m.isMDXComponent=!0}}]);