"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[611],{4137:function(t,e,n){n.d(e,{Zo:function(){return m},kt:function(){return c}});var a=n(7294);function r(t,e,n){return e in t?Object.defineProperty(t,e,{value:n,enumerable:!0,configurable:!0,writable:!0}):t[e]=n,t}function i(t,e){var n=Object.keys(t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(t);e&&(a=a.filter((function(e){return Object.getOwnPropertyDescriptor(t,e).enumerable}))),n.push.apply(n,a)}return n}function o(t){for(var e=1;e<arguments.length;e++){var n=null!=arguments[e]?arguments[e]:{};e%2?i(Object(n),!0).forEach((function(e){r(t,e,n[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(t,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(e){Object.defineProperty(t,e,Object.getOwnPropertyDescriptor(n,e))}))}return t}function l(t,e){if(null==t)return{};var n,a,r=function(t,e){if(null==t)return{};var n,a,r={},i=Object.keys(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||(r[n]=t[n]);return r}(t,e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(t);for(a=0;a<i.length;a++)n=i[a],e.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(t,n)&&(r[n]=t[n])}return r}var d=a.createContext({}),p=function(t){var e=a.useContext(d),n=e;return t&&(n="function"==typeof t?t(e):o(o({},e),t)),n},m=function(t){var e=p(t.components);return a.createElement(d.Provider,{value:e},t.children)},s={inlineCode:"code",wrapper:function(t){var e=t.children;return a.createElement(a.Fragment,{},e)}},u=a.forwardRef((function(t,e){var n=t.components,r=t.mdxType,i=t.originalType,d=t.parentName,m=l(t,["components","mdxType","originalType","parentName"]),u=p(n),c=r,k=u["".concat(d,".").concat(c)]||u[c]||s[c]||i;return n?a.createElement(k,o(o({ref:e},m),{},{components:n})):a.createElement(k,o({ref:e},m))}));function c(t,e){var n=arguments,r=e&&e.mdxType;if("string"==typeof t||r){var i=n.length,o=new Array(i);o[0]=u;var l={};for(var d in e)hasOwnProperty.call(e,d)&&(l[d]=e[d]);l.originalType=t,l.mdxType="string"==typeof t?t:r,o[1]=l;for(var p=2;p<i;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},9258:function(t,e,n){n.r(e),n.d(e,{frontMatter:function(){return l},contentTitle:function(){return d},metadata:function(){return p},toc:function(){return m},default:function(){return u}});var a=n(7462),r=n(3366),i=(n(7294),n(4137)),o=["components"],l={title:"LookML",sidebar_label:"LookML",slug:"/metadata-ingestion/source_docs/lookml",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/source_docs/lookml.md"},d="LookML",p={unversionedId:"metadata-ingestion/source_docs/lookml",id:"metadata-ingestion/source_docs/lookml",isDocsHomePage:!1,title:"LookML",description:"For context on getting started with ingestion, check out our metadata ingestion guide.",source:"@site/genDocs/metadata-ingestion/source_docs/lookml.md",sourceDirName:"metadata-ingestion/source_docs",slug:"/metadata-ingestion/source_docs/lookml",permalink:"/docs/metadata-ingestion/source_docs/lookml",editUrl:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/source_docs/lookml.md",tags:[],version:"current",frontMatter:{title:"LookML",sidebar_label:"LookML",slug:"/metadata-ingestion/source_docs/lookml",custom_edit_url:"https://github.com/linkedin/datahub/blob/master/metadata-ingestion/source_docs/lookml.md"},sidebar:"overviewSidebar",previous:{title:"Looker dashboards",permalink:"/docs/metadata-ingestion/source_docs/looker"},next:{title:"MariaDB",permalink:"/docs/metadata-ingestion/source_docs/mariadb"}},m=[{value:"Setup",id:"setup",children:[],level:2},{value:"Capabilities",id:"capabilities",children:[{value:"Configuration Notes",id:"configuration-notes",children:[],level:3}],level:2},{value:"Quickstart recipe",id:"quickstart-recipe",children:[],level:2},{value:"Config details",id:"config-details",children:[],level:2},{value:"Compatibility",id:"compatibility",children:[],level:2},{value:"Questions",id:"questions",children:[],level:2}],s={toc:m};function u(t){var e=t.components,n=(0,r.Z)(t,o);return(0,i.kt)("wrapper",(0,a.Z)({},s,n,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"lookml"},"LookML"),(0,i.kt)("p",null,"For context on getting started with ingestion, check out our ",(0,i.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion"},"metadata ingestion guide"),"."),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("p",null,"To install this plugin, run ",(0,i.kt)("inlineCode",{parentName:"p"},"pip install 'acryl-datahub[lookml]'"),"."),(0,i.kt)("p",null,"Note! This plugin uses a package that requires Python 3.7+!"),(0,i.kt)("h2",{id:"capabilities"},"Capabilities"),(0,i.kt)("p",null,"This plugin extracts the following:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"LookML views from model files in a project"),(0,i.kt)("li",{parentName:"ul"},"Name, upstream table names, metadata for dimensions, measures, and dimension groups attached as tags"),(0,i.kt)("li",{parentName:"ul"},"If API integration is enabled (recommended), resolves table and view names by calling the Looker API, otherwise supports offline resolution of these names.")),(0,i.kt)("p",null,(0,i.kt)("strong",{parentName:"p"},(0,i.kt)("em",{parentName:"strong"},"NOTE"),":")," To get complete Looker metadata integration (including Looker dashboards and charts and lineage to the underlying Looker views, you must ALSO use the Looker source. Documentation for that is ",(0,i.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion/source_docs/looker"},"here")),(0,i.kt)("h3",{id:"configuration-notes"},"Configuration Notes"),(0,i.kt)("p",null,"See the ",(0,i.kt)("a",{parentName:"p",href:"https://docs.looker.com/reference/api-and-integration/api-auth#authentication_with_an_sdk"},"Looker authentication docs")," for the steps to create a client ID and secret.\nYou need to ensure that the API key is attached to a user that has Admin privileges. If that is not possible, read the configuration section to provide an offline specification of the ",(0,i.kt)("inlineCode",{parentName:"p"},"connection_to_platform_map")," and the ",(0,i.kt)("inlineCode",{parentName:"p"},"project_name"),"."),(0,i.kt)("h2",{id:"quickstart-recipe"},"Quickstart recipe"),(0,i.kt)("p",null,"Check out the following recipe to get started with ingestion! See ",(0,i.kt)("a",{parentName:"p",href:"#config-details"},"below")," for full configuration options."),(0,i.kt)("p",null,"For general pointers on writing and running a recipe, see our ",(0,i.kt)("a",{parentName:"p",href:"/docs/metadata-ingestion#recipes"},"main recipe guide"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yml"},'source:\n  type: "lookml"\n  config:\n    # Coordinates\n    base_folder: /path/to/model/files\n\n    # Options\n    api:\n      # Coordinates for your looker instance\n      base_url: https://YOUR_INSTANCE.cloud.looker.com\n\n      # Credentials for your Looker connection (https://docs.looker.com/reference/api-and-integration/api-auth)\n      client_id: client_id_from_looker \n      client_secret: client_secret_from_looker\n      \n    # Alternative to API section above if you want a purely file-based ingestion with no api calls to Looker\n    # project_name: PROJECT_NAME # See (https://docs.looker.com/data-modeling/getting-started/how-project-works) to understand what is your project name\n    # connection_to_platform_map:\n    #   connection_name_1:\n    #     platform: snowflake # bigquery, hive, etc\n    #     default_db: DEFAULT_DATABASE. # the default database configured for this connection\n    #     default_schema: DEFAULT_SCHEMA # the default schema configured for this connection\n    #   connection_name_2:\n    #     platform: bigquery # snowflake, hive, etc\n    #     default_db: DEFAULT_DATABASE. # the default database configured for this connection\n    #     default_schema: DEFAULT_SCHEMA # the default schema configured for this connection\n    \n    github_info:\n       repo: org/repo-name\n          \n    \nsink:\n  # sink configs\n')),(0,i.kt)("h2",{id:"config-details"},"Config details"),(0,i.kt)("p",null,"Note that a ",(0,i.kt)("inlineCode",{parentName:"p"},".")," is used to denote nested fields in the YAML recipe."),(0,i.kt)("table",null,(0,i.kt)("thead",{parentName:"table"},(0,i.kt)("tr",{parentName:"thead"},(0,i.kt)("th",{parentName:"tr",align:null},"Field"),(0,i.kt)("th",{parentName:"tr",align:null},"Required"),(0,i.kt)("th",{parentName:"tr",align:null},"Default"),(0,i.kt)("th",{parentName:"tr",align:null},"Description"))),(0,i.kt)("tbody",{parentName:"table"},(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"base_folder")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Where the ",(0,i.kt)("inlineCode",{parentName:"td"},"*.model.lkml")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"*.view.lkml")," files are stored.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"api.base_url")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Url to your Looker instance: ",(0,i.kt)("a",{parentName:"td",href:"https://company.looker.com:19999"},"https://company.looker.com:19999")," or ",(0,i.kt)("a",{parentName:"td",href:"https://looker.company.com"},"https://looker.company.com"),", or similar.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"api.client_id")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Looker API3 client ID.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"api.client_secret")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Looker API3 client secret.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"project_name")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if NOT using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"The project name within with all the model files live. See (",(0,i.kt)("a",{parentName:"td",href:"https://docs.looker.com/data-modeling/getting-started/how-project-works"},"https://docs.looker.com/data-modeling/getting-started/how-project-works"),") to understand what the Looker project name should be. The simplest way to see your projects is to click on ",(0,i.kt)("inlineCode",{parentName:"td"},"Develop")," followed by ",(0,i.kt)("inlineCode",{parentName:"td"},"Manage LookML Projects")," in the Looker application.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"connection_to_platform_map.<connection_name>")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Mappings between connection names in the model files to platform, database and schema values")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"connection_to_platform_map.<connection_name>.platform")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if NOT using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Mappings between connection name in the model files to platform name (e.g. snowflake, bigquery, etc)")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"connection_to_platform_map.<connection_name>.default_db")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if NOT using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Mappings between connection name in the model files to default database configured for this platform on Looker")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"connection_to_platform_map.<connection_name>.default_schema")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2753 if NOT using api"),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Mappings between connection name in the model files to default schema configured for this platform on Looker")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"platform_name")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"looker"')),(0,i.kt)("td",{parentName:"tr",align:null},"Platform to use in namespace when constructing URNs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"model_pattern.allow")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"List of regex patterns for models to include in ingestion.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"model_pattern.deny")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"List of regex patterns for models to exclude from ingestion.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"model_pattern.ignoreCase")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"True")),(0,i.kt)("td",{parentName:"tr",align:null},"Whether to ignore case sensitivity during pattern matching.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"view_pattern.allow")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"List of regex patterns for views to include in ingestion.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"view_pattern.deny")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"List of regex patterns for views to exclude from ingestion.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"view_pattern.ignoreCase")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"True")),(0,i.kt)("td",{parentName:"tr",align:null},"Whether to ignore case sensitivity during pattern matching.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"view_naming_pattern")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"{project}.view.{name}")),(0,i.kt)("td",{parentName:"tr",align:null},"Pattern for providing dataset names to views. Allowed variables are ",(0,i.kt)("inlineCode",{parentName:"td"},"{project}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{model}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{name}"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"view_browse_pattern")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"/{env}/{platform}/{project}/views/{name}")),(0,i.kt)("td",{parentName:"tr",align:null},"Pattern for providing browse paths to views. Allowed variables are ",(0,i.kt)("inlineCode",{parentName:"td"},"{project}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{model}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{name}"),", ",(0,i.kt)("inlineCode",{parentName:"td"},"{platform}")," and ",(0,i.kt)("inlineCode",{parentName:"td"},"{env}"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"env")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},'"PROD"')),(0,i.kt)("td",{parentName:"tr",align:null},"Environment to use in namespace when constructing URNs.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"parse_table_names_from_sql")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"False")),(0,i.kt)("td",{parentName:"tr",align:null},"See note below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"tag_measures_and_dimensions")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"True")),(0,i.kt)("td",{parentName:"tr",align:null},"When enabled, attaches tags to measures, dimensions and dimension groups to make them more discoverable. When disabled, adds this information to the description of the column.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"github_info")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Empty."),(0,i.kt)("td",{parentName:"tr",align:null},"When provided, will annotate views with github urls. See config variables below.")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"github_info.repo")),(0,i.kt)("td",{parentName:"tr",align:null},"\u2705   if providing ",(0,i.kt)("inlineCode",{parentName:"td"},"github_info")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},"Your github repository in ",(0,i.kt)("inlineCode",{parentName:"td"},"org/repo")," form. e.g. ",(0,i.kt)("inlineCode",{parentName:"td"},"linkedin/datahub"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"github_info.branch")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"main")),(0,i.kt)("td",{parentName:"tr",align:null},"The default branch in your repo that you want urls to point to. Typically ",(0,i.kt)("inlineCode",{parentName:"td"},"main")," or ",(0,i.kt)("inlineCode",{parentName:"td"},"master"))),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"github_info.base_url")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"https://github.com")),(0,i.kt)("td",{parentName:"tr",align:null},"The base url for your github coordinates")),(0,i.kt)("tr",{parentName:"tbody"},(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"sql_parser")),(0,i.kt)("td",{parentName:"tr",align:null}),(0,i.kt)("td",{parentName:"tr",align:null},(0,i.kt)("inlineCode",{parentName:"td"},"datahub.utilities.sql_parser.DefaultSQLParser")),(0,i.kt)("td",{parentName:"tr",align:null},"See note below.")))),(0,i.kt)("p",null,"Note! The integration can use an SQL parser to try to parse the tables the views depends on. This parsing is disabled by default,\nbut can be enabled by setting ",(0,i.kt)("inlineCode",{parentName:"p"},"parse_table_names_from_sql: True"),".  The default parser is based on the ",(0,i.kt)("a",{parentName:"p",href:"https://pypi.org/project/sql-metadata/"},(0,i.kt)("inlineCode",{parentName:"a"},"sql-metadata"))," package.\nAs this package doesn't officially support all the SQL dialects that Looker supports, the result might not be correct. You can, however, implement a\ncustom parser and take it into use by setting the ",(0,i.kt)("inlineCode",{parentName:"p"},"sql_parser")," configuration value. A custom SQL parser must inherit from ",(0,i.kt)("inlineCode",{parentName:"p"},"datahub.utilities.sql_parser.SQLParser"),"\nand must be made available to Datahub by ,for example, installing it. The configuration then needs to be set to ",(0,i.kt)("inlineCode",{parentName:"p"},"module_name.ClassName")," of the parser."),(0,i.kt)("h2",{id:"compatibility"},"Compatibility"),(0,i.kt)("p",null,"Coming soon!"),(0,i.kt)("h2",{id:"questions"},"Questions"),(0,i.kt)("p",null,"If you've got any questions on configuring this source, feel free to ping us on ",(0,i.kt)("a",{parentName:"p",href:"https://slack.datahubproject.io/"},"our Slack"),"!"))}u.isMDXComponent=!0}}]);